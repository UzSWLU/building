services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-building}
      POSTGRES_USER: ${POSTGRES_USER:-building}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-building_production_password_2024}
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - building_network

  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    command: gunicorn project_core.wsgi:application --bind 0.0.0.0:8000 --workers 3
    env_file:
      - .env.prod
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-production-secret-key-change-this-in-production}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-0}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-building.swagger.uzswlu.uz}
      POSTGRES_DB: ${POSTGRES_DB:-building}
      POSTGRES_USER: ${POSTGRES_USER:-building}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-building_production_password_2024}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      AUTH_BASE_URL: ${AUTH_BASE_URL:-https://auth.uzswlu.uz}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - building_network

  nginx:
    image: nginx:alpine
    ports:
      - "5001:80"
      - "5443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - building_network

volumes:
  db_data:
  static_volume:
  media_volume:

networks:
  building_network:
    driver: bridge