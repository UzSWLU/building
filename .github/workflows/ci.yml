name: 🧪 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: building_test
          POSTGRES_USER: building
          POSTGRES_PASSWORD: building
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔧 Setup test environment
        run: |
          cp env.prod.example .env.test
          echo "DJANGO_SECRET_KEY=test-secret-key-for-ci" >> .env.test
          echo "DJANGO_DEBUG=1" >> .env.test
          echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1" >> .env.test
          echo "POSTGRES_DB=building_test" >> .env.test
          echo "POSTGRES_USER=building" >> .env.test
          echo "POSTGRES_PASSWORD=building" >> .env.test
          echo "POSTGRES_HOST=localhost" >> .env.test
          echo "POSTGRES_PORT=5432" >> .env.test
          echo "AUTH_BASE_URL=https://auth.uzswlu.uz" >> .env.test

      - name: 🗄️ Run migrations
        run: python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: project_core.settings

      - name: 🧪 Run tests
        run: |
          python manage.py test app_rttm.tests
        env:
          DJANGO_SETTINGS_MODULE: project_core.settings

      - name: 📊 Check code quality
        run: |
          python manage.py check
          python manage.py check --deploy

  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        run: |
          docker build -t building-api:latest .

      - name: 🧪 Test Docker image
        run: |
          docker run --rm building-api:latest python manage.py check

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
