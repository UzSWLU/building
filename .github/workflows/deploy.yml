name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: "Force deployment even if no changes"
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: building_test
          POSTGRES_USER: building
          POSTGRES_PASSWORD: building
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗄️ Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: 🔧 Setup test environment
        run: |
          cp env.prod.example .env.test
          echo "DJANGO_SECRET_KEY=test-secret-key-for-ci" >> .env.test
          echo "DJANGO_DEBUG=1" >> .env.test
          echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1" >> .env.test
          echo "POSTGRES_DB=building_test" >> .env.test
          echo "POSTGRES_USER=building" >> .env.test
          echo "POSTGRES_PASSWORD=building" >> .env.test
          echo "POSTGRES_HOST=localhost" >> .env.test
          echo "POSTGRES_PORT=5432" >> .env.test
          echo "AUTH_BASE_URL=https://auth.uzswlu.uz" >> .env.test

      - name: 🗄️ Create test database
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U building; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          # Check if database exists, create if not
          if PGPASSWORD=building psql -h localhost -U building -lqt | cut -d \| -f 1 | grep -qw building_test; then
            echo "✅ Test database already exists"
          else
            echo "📝 Creating test database..."
            PGPASSWORD=building createdb -h localhost -U building building_test
            echo "✅ Test database created"
          fi

      - name: 🗄️ Run migrations
        run: python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: project_core.settings
          POSTGRES_DB: building_test
          POSTGRES_USER: building
          POSTGRES_PASSWORD: building
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

      - name: 🧪 Run tests
        run: |
          python manage.py test app_rttm
        env:
          DJANGO_SETTINGS_MODULE: project_core.settings
          POSTGRES_DB: building_test
          POSTGRES_USER: building
          POSTGRES_PASSWORD: building
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

      - name: 📊 Check code quality
        run: |
          python manage.py check
          python manage.py check --deploy
        env:
          DJANGO_SETTINGS_MODULE: project_core.settings
          POSTGRES_DB: building_test
          POSTGRES_USER: building
          POSTGRES_PASSWORD: building
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

  deploy:
    name: 🚀 Deploy to Production
    runs-on: [self-hosted, Linux, X64]
    needs: test
    timeout-minutes: 10
    # Run as root user to avoid permission issues
    container:
      image: ubuntu:22.04
      options: --user root

    steps:
      - name: 📦 Install required packages
        run: |
          echo "📦 Installing required packages..."
          apt-get update
          apt-get install -y git curl wget

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          echo "✅ Packages installed successfully"

      - name: 📥 Setup and pull latest code
        run: |
          # Create directory if it doesn't exist
          echo "📁 Creating directory structure..."
          mkdir -p /var/www/building-api
          cd /var/www/building-api

          # Check if repository exists, clone if not
          if [ ! -d ".git" ]; then
            echo "📥 Cloning repository..."
            git clone https://github.com/a-d-sh/building.git .
          else
            echo "📥 Pulling latest code..."
            git fetch origin main
            git reset --hard origin/main
          fi

          # Fix git ownership and permissions
          echo "🔧 Fixing git ownership and permissions..."
          git config --global --add safe.directory /var/www/building-api

          # Fix permissions for entire directory
          echo "🔧 Fixing directory permissions..."
          chmod -R 755 . 2>/dev/null || echo "⚠️ Could not change directory permissions, continuing..."

          # Ensure deploy user owns all files
          echo "🔧 Fixing file ownership..."
          chown -R deploy:deploy . 2>/dev/null || echo "⚠️ Could not change file ownership, continuing..."

      - name: 🔧 Update environment variables
        run: |
          cd /var/www/building-api

          echo "🔍 Checking .env.prod file..."
          if [ ! -f .env.prod ]; then
            echo "📝 Creating .env.prod from template..."
            if [ -f env.prod.example ]; then
              cp env.prod.example .env.prod
            else
              echo "⚠️ env.prod.example not found, creating basic .env.prod"
            fi
          fi

          # Create complete environment file
          echo "# Production Environment Variables for Building API" > .env.prod
          echo "" >> .env.prod
          echo "# Django Settings" >> .env.prod
          echo "DJANGO_SECRET_KEY=django-insecure-production-secret-key-change-this-in-production" >> .env.prod
          echo "DJANGO_DEBUG=0" >> .env.prod
          echo "DJANGO_ALLOWED_HOSTS=api.uzswlu.uz,172.22.0.19,localhost,127.0.0.1" >> .env.prod
          echo "CSRF_TRUSTED_ORIGINS=https://front.uzswlu.uz,https://building.api.uzswlu.uz,https://api.uzswlu.uz,https://uzswlu.uz,http://localhost:3003,http://172.22.0.19:5001" >> .env.prod
          echo "" >> .env.prod
          echo "# Domain Configuration" >> .env.prod
          echo "API_DOMAIN=api.uzswlu.uz" >> .env.prod
          echo "API_PORT=5001" >> .env.prod
          echo "" >> .env.prod
          echo "# Database Settings" >> .env.prod
          echo "POSTGRES_DB=building" >> .env.prod
          echo "POSTGRES_USER=building" >> .env.prod
          echo "POSTGRES_PASSWORD=building_production_password_2024" >> .env.prod
          echo "POSTGRES_HOST=db" >> .env.prod
          echo "POSTGRES_PORT=5432" >> .env.prod
          echo "" >> .env.prod
          echo "# Auth Service" >> .env.prod
          echo "AUTH_BASE_URL=https://auth.uzswlu.uz" >> .env.prod
          echo "AUTH_TIMEOUT=10" >> .env.prod
          echo "AUTH_CACHE_TIMEOUT=300" >> .env.prod
          echo "" >> .env.prod
          echo "# OAuth URLs" >> .env.prod
          echo "BACKEND_URL=https://auth.uzswlu.uz" >> .env.prod
          echo "FRONTEND_CALLBACK_URL=https://building.swagger.uzswlu.uz/callback,http://localhost:5001/callback" >> .env.prod
          echo "" >> .env.prod
          echo "# Server Settings" >> .env.prod
          echo "SERVER_HOST=172.22.0.19" >> .env.prod
          echo "SERVER_USER=root" >> .env.prod
          echo "SERVER_PORT=22" >> .env.prod

          echo "✅ Environment configured:"
          cat .env.prod

      - name: 🐳 Complete deploy
        run: |
          cd /var/www/building-api

          echo "🔍 Checking current containers..."
          docker-compose -f docker-compose.prod.yml ps || true

          echo "🛑 SAFE CLEANUP - Only building-api containers..."

          # Stop and remove only building-api containers
          echo "🛑 Stopping building-api containers..."
          docker-compose -f docker-compose.prod.yml down -v --remove-orphans || true

          # Remove only building-api related containers
          echo "🛑 Removing building-api containers..."
          docker ps -a --filter "name=building-api" --format "{{.ID}}" | xargs -r docker rm -f || true

          # Remove only building-api related volumes
          echo "🛑 Removing building-api volumes..."
          docker volume ls --filter "name=building" --format "{{.Name}}" | xargs -r docker volume rm || true

          # Remove specific building-api volumes
          echo "🛑 Removing specific building-api volumes..."
          docker volume rm building-api_db_data 2>/dev/null || true
          docker volume rm building-api_static_volume 2>/dev/null || true
          docker volume rm building-api_media_volume 2>/dev/null || true

          # Remove only building-api related networks
          echo "🛑 Removing building-api networks..."
          docker network ls --filter "name=building" --format "{{.Name}}" | xargs -r docker network rm || true

          echo "🔍 Checking port 5001 usage..."
          netstat -tulpn | grep :5001 || echo "Port 5001 is free"

          echo "⏳ Waiting for complete cleanup..."
          sleep 2

          echo "🔨 Building web container (with cache)..."
          # Use cache for faster builds, only rebuild if Dockerfile changed
          docker-compose -f docker-compose.prod.yml build --parallel web

          echo "🗄️ Starting database first..."
          docker-compose -f docker-compose.prod.yml up -d db

          echo "⏳ Waiting for database to initialize..."
          sleep 10

          echo "🔍 Checking database container status..."
          docker-compose -f docker-compose.prod.yml ps db

          echo "🚀 Starting all services..."
          docker-compose -f docker-compose.prod.yml up -d

          echo "⏳ Waiting for services to start..."
          sleep 10

          echo "🔍 Checking final container status..."
          docker-compose -f docker-compose.prod.yml ps

      - name: 🗄️ Run database migrations
        run: |
          cd /var/www/building-api
          echo "🗄️ Running database migrations..."

          echo "🔍 Checking database container status..."
          docker-compose -f docker-compose.prod.yml ps

          echo "⏳ Waiting for database container to be healthy..."
          for i in $(seq 1 30); do
            echo "Attempt $i/30: Checking database status..."
            DB_STATUS=$(docker-compose -f docker-compose.prod.yml ps db | grep -E "(Up|healthy)" || echo "not_ready")
            if echo "$DB_STATUS" | grep -q "Up"; then
              echo "✅ Database container is running!"
              break
            fi
            echo "⏳ Database not ready yet, waiting 10 seconds..."
            sleep 10
          done

          echo "🔍 Final database container status..."
          docker-compose -f docker-compose.prod.yml ps

          echo "🗄️ Running migrations..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate

          echo "📊 Creating superuser if not exists..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py shell -c "
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username='admin').exists():
              User.objects.create_superuser('admin', 'admin@uzswlu.uz', 'admin123')
              print('Superuser created')
          else:
              print('Superuser already exists')
          "

      - name: 📊 Collect static files
        run: |
          cd /var/www/building-api
          echo "📊 Collecting static files..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput

      - name: 🏥 Health check
        run: |
          cd /var/www/building-api
          echo "🏥 Performing health checks..."

          # Wait for services to be ready
          sleep 5

          # Check container status
          echo "📊 Container Status:"
          docker-compose -f docker-compose.prod.yml ps

          # Test API endpoints
          echo "🔍 Testing API endpoints..."

          # Health check (Domain)
          curl -f http://api.uzswlu.uz/health/ || echo "⚠️ Health check failed"

          # Swagger UI (Domain)
          curl -f http://api.uzswlu.uz/ || echo "⚠️ Swagger UI check failed"

          # API schema (Domain)
          curl -f http://api.uzswlu.uz/api/schema/ || echo "⚠️ API schema check failed"

      - name: 📝 Display logs
        if: always()
        run: |
          cd /var/www/building-api
          echo "📝 Recent application logs:"
          docker-compose -f docker-compose.prod.yml logs --tail=50 web

      - name: 🔍 Check DNS and Nginx configuration
        run: |
          echo "🔍 Checking DNS and Nginx configuration..."

          # Check DNS resolution (skip if tools not available)
          echo "📡 DNS Resolution Test:"
          if command -v nslookup >/dev/null 2>&1; then
            nslookup api.uzswlu.uz || echo "⚠️ DNS resolution failed"
            nslookup auth.uzswlu.uz || echo "⚠️ DNS resolution failed"
          else
            echo "⚠️ nslookup not available in container"
          fi

          # Check server Nginx configuration (skip if not available)
          echo "🌐 Server Nginx Configuration:"
          if [ -d "/etc/nginx/sites-enabled" ]; then
            echo "📁 Sites enabled:"
            ls -la /etc/nginx/sites-enabled/
          else
            echo "⚠️ Server-level Nginx not available in container"
          fi

          # Check what api.uzswlu.uz currently serves
          echo "🔍 Checking what api.uzswlu.uz currently serves:"
          curl -s http://api.uzswlu.uz/ | head -10 || echo "⚠️ Could not get api.uzswlu.uz content"

          # Check what auth.uzswlu.uz serves
          echo "🔍 Checking what auth.uzswlu.uz serves:"
          curl -s http://auth.uzswlu.uz/ | head -10 || echo "⚠️ Could not get auth.uzswlu.uz content"

          # Check Nginx configuration
          echo "🌐 Building API Nginx Configuration Test:"
          cd /var/www/building-api
          docker-compose -f docker-compose.prod.yml exec nginx nginx -t || echo "⚠️ Nginx config test failed"

          # Check if domain is accessible
          echo "🌍 Domain Accessibility Test:"
          curl -I --connect-timeout 10 --max-time 15 http://api.uzswlu.uz/ || echo "⚠️ Domain not accessible"
          curl -I --connect-timeout 10 --max-time 15 http://172.22.0.19:5001/ || echo "⚠️ Direct IP:port not accessible"

          # Check current domain status
          echo "🔧 Checking current domain status..."
          echo "📝 api.uzswlu.uz should be moved to building.api.uzswlu.uz"
          echo "📝 Current status will be checked by server admin"

          # Auto-configure server-level Nginx and SSL certificates
          echo "🔧 Auto-configuring server-level Nginx and SSL..."
          
          # Create server-level Nginx configuration via Docker exec
          echo "📝 Creating server-level Nginx configuration..."
          
          # Remove old api.uzswlu.uz configuration if exists
          docker exec $(docker ps -q --filter "name=nginx") rm -f /etc/nginx/sites-enabled/api.uzswlu.uz 2>/dev/null || true
          
          # Create building.api.uzswlu.uz configuration
          docker exec $(docker ps -q --filter "name=nginx") bash -c 'cat > /etc/nginx/sites-available/building.api.uzswlu.uz << "EOF"
# HTTP server
server {
    listen 80;
    server_name building.api.uzswlu.uz;

    # Proxy to Building API Docker container
    location / {
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Additional headers for Django
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Server $host;
    }
}
EOF'
          
          # Enable the site
          docker exec $(docker ps -q --filter "name=nginx") ln -sf /etc/nginx/sites-available/building.api.uzswlu.uz /etc/nginx/sites-enabled/
          
          # Test and reload Nginx
          docker exec $(docker ps -q --filter "name=nginx") nginx -t && docker exec $(docker ps -q --filter "name=nginx") nginx -s reload
          
          echo "✅ Server-level Nginx configuration updated for building.api.uzswlu.uz"

      - name: ✅ Deployment success
        run: |
          echo "✅ =============================================="
          echo "✅ BUILDING API DEPLOYED SUCCESSFULLY!"
          echo "✅ =============================================="
          echo ""
          echo "🌐 Production URLs:"
          echo "🔗 API: http://172.22.0.19:5001/"
          echo "🔗 Swagger UI: http://172.22.0.19:5001/"
          echo "🔗 Health Check: http://172.22.0.19:5001/health/"
          echo "🔗 API Schema: http://172.22.0.19:5001/api/schema/"
          echo "🔗 Admin: http://172.22.0.19:5001/admin/"
          echo ""
          echo "🌐 Domain URLs (with SSL certificates):"
          API_DOMAIN=$(grep "API_DOMAIN=" .env.prod | cut -d'=' -f2)
          echo "🔗 API: https://${API_DOMAIN}/"
          echo "🔗 Swagger UI: https://${API_DOMAIN}/"
          echo "🔗 Health Check: https://${API_DOMAIN}/health/"
          echo "🔗 API Schema: https://${API_DOMAIN}/api/schema/"
          echo "🔗 Admin: https://${API_DOMAIN}/admin/"
          echo ""
          echo "🔒 SSL Certificate: Automatically installed and auto-renewing"
          echo "🔄 HTTP → HTTPS: Automatic redirect configured"
          echo ""
          echo "📊 Container Status:"
          cd /var/www/building-api
          docker-compose -f docker-compose.prod.yml ps || echo "⚠️ Could not get container status"
