name: Deploy Building API

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: building_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          POSTGRES_DB: building_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          DJANGO_SECRET_KEY: test-secret-key
          DJANGO_DEBUG: 1
        run: |
          python manage.py migrate
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /var/www/building-api
            git pull origin main
            
            # Environment variables'ni sozlash
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" > .env.prod
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env.prod
            echo "DJANGO_DEBUG=0" >> .env.prod
            echo "DJANGO_ALLOWED_HOSTS=building.swagger.uzswlu.uz" >> .env.prod
            echo "POSTGRES_DB=building" >> .env.prod
            echo "POSTGRES_USER=building" >> .env.prod
            echo "POSTGRES_HOST=db" >> .env.prod
            echo "POSTGRES_PORT=5432" >> .env.prod
            echo "AUTH_BASE_URL=https://auth.uzswlu.uz" >> .env.prod
            echo "AUTH_TIMEOUT=10" >> .env.prod
            echo "AUTH_CACHE_TIMEOUT=300" >> .env.prod
            
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml build --no-cache
            docker-compose -f docker-compose.prod.yml up -d
            sleep 10
            docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate
            docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput
            docker-compose -f docker-compose.prod.yml exec -T web python manage.py shell -c "
            from django.contrib.auth import get_user_model
            User = get_user_model()
            if not User.objects.filter(username='admin').exists():
                User.objects.create_superuser('admin', 'admin@uzswlu.uz', 'admin123')
                print('Superuser created: admin/admin123')
            else:
                print('Superuser already exists')
            "
