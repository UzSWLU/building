name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    name: 🚀 Deploy to Production
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Pull latest code
        run: |
          cd /var/www/building-api
          
          # Fix git ownership issue
          echo "🔧 Fixing git ownership..."
          git config --global --add safe.directory /var/www/building-api
          
          echo "📥 Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main

      - name: 🔧 Update environment variables
        run: |
          cd /var/www/building-api
          
          echo "🔍 Checking .env.production..."
          if [ ! -f .env.production ]; then
            echo "📝 Creating .env.production from template..."
            cp env.prod.example .env.production
          fi
          
          # Create complete environment file
          cat > .env.production << 'EOF'
# Production Environment Variables for Building API

# Django Settings
DJANGO_SECRET_KEY=django-insecure-production-secret-key-change-this-in-production
DJANGO_DEBUG=0
DJANGO_ALLOWED_HOSTS=building.swagger.uzswlu.uz

# Database Settings
POSTGRES_DB=building
POSTGRES_USER=building
POSTGRES_PASSWORD=building_production_password_2024
POSTGRES_HOST=db
POSTGRES_PORT=5432

# Auth Service
AUTH_BASE_URL=https://auth.uzswlu.uz
AUTH_TIMEOUT=10
AUTH_CACHE_TIMEOUT=300

# OAuth URLs
BACKEND_URL=https://auth.uzswlu.uz
FRONTEND_CALLBACK_URL=https://building.swagger.uzswlu.uz/callback,http://localhost:5001/callback

# Server Settings
SERVER_HOST=172.22.0.19
SERVER_USER=root
SERVER_PORT=22
EOF
          
          echo "✅ Environment configured:"
          cat .env.production

      - name: 🐳 Build and deploy
        run: |
          cd /var/www/building-api
          
          echo "🛑 Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down -v
          
          echo "🔨 Building new containers..."
          docker-compose -f docker-compose.prod.yml build --no-cache
          
          echo "🚀 Starting services..."
          docker-compose -f docker-compose.prod.yml up -d
          
          echo "⏳ Waiting for services to start..."
          sleep 30

      - name: 🗄️ Run database migrations
        run: |
          cd /var/www/building-api
          echo "🗄️ Running database migrations..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate
          
          echo "📊 Creating superuser if not exists..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py shell -c "
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username='admin').exists():
              User.objects.create_superuser('admin', 'admin@uzswlu.uz', 'admin123')
              print('Superuser created')
          else:
              print('Superuser already exists')
          "

      - name: 📊 Collect static files
        run: |
          cd /var/www/building-api
          echo "📊 Collecting static files..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput

      - name: 🏥 Health check
        run: |
          cd /var/www/building-api
          echo "🏥 Performing health checks..."
          
          # Wait for services to be ready
          sleep 10
          
          # Check container status
          echo "📊 Container Status:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Test API endpoints
          echo "🔍 Testing API endpoints..."
          
          # Health check (local)
          curl -f http://localhost:5001/health/ || echo "⚠️ Health check failed"
          
          # Swagger UI (local)
          curl -f http://localhost:5001/ || echo "⚠️ Swagger UI check failed"
          
          # API schema (local)
          curl -f http://localhost:5001/api/schema/ || echo "⚠️ API schema check failed"

      - name: 📝 Display logs
        if: always()
        run: |
          cd /var/www/building-api
          echo "📝 Recent application logs:"
          docker-compose -f docker-compose.prod.yml logs --tail=50 web

      - name: ✅ Deployment success
        run: |
          echo "✅ =============================================="
          echo "✅ BUILDING API DEPLOYED SUCCESSFULLY!"
          echo "✅ =============================================="
          echo ""
          echo "🔗 API: https://building.swagger.uzswlu.uz/"
          echo "🔗 Swagger UI: https://building.swagger.uzswlu.uz/"
          echo "🔗 Health Check: https://building.swagger.uzswlu.uz/health/"
          echo "🔗 Admin: https://building.swagger.uzswlu.uz/admin/"
          echo ""
          echo "📊 Container Status:"
          docker-compose -f docker-compose.prod.yml ps